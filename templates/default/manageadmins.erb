#!/bin/bash

# Admin users script
#
# Creates admin users with sudo access. Requires S3 based public key store to work

GROUP="<%= node['datashades']['jumpbox']['usergroup'] %>"
keybucket="<%= node['datashades']['jumpbox']['bucket'] %>"

if [ -z ${GROUP} ] || [ -z ${keybucket} ]; then
	exit 0
fi

placement=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)
region=$(echo ${placement%?})

# Make sure only root can run this script
#
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# Get a list of public key tokens from the S3 public key bucket
#
keylist=$(aws s3 ls ${keybucket} | awk '/pub/ {print $4;}' | cut -d '.' -f 1 | sort)
readarray keys <<< "${keylist}"

# Exit if no keys found
#
if [ ${#keys[@]} -lt 1 ]; then
	exit 0
fi

function create_jumpbox_group
{
	# Obtain jbusers group id, and create group if it doesn't exist
	#
	jumpbox_gid=$(grep "${GROUP}:" /etc/group | cut -d ':' -f 3)
	if [ -z "${jumpbox_gid}" ]; then
		groupadd ${GROUP}
		jumpbox_gid=$(cat /etc/group | grep ${GROUP} | cut -d ':' -f 3)
	fi
}

function copykeys
{
	# Copy public key tokens from the bucket
	#
	mkdir -p /tmp/keys
	aws s3 cp ${keybucket} /tmp/keys/ --recursive --include "*.pub" --region $region
}

function delusers
{
	# Need gid so we can delete users who don't have a public key in our store
	# Works similar to OpsWorks ruby script
	#
	jumpbox_userlist=$(cat /etc/passwd | grep $jumpbox_gid | cut -d ':' -f 1 | sort)
	readarray jb_users <<< "${jumpbox_userlist}"

	old_users=$(echo ${jb_users[@]} ${keys[@]} | tr ' ' '\n' | sort | uniq -u)
	readarray del_users <<< "${old_users}"

	if [ ${#del_users[@]} -gt 0 ]; then
		for olduser in "${del_users[@]}"
			do
				deluser=$(echo ${olduser} | tr -d "\r\n")
				if [ -z "${deluser}" ]; then
					continue
				fi
				uname=$(grep "${deluser}" /etc/passwd)
				if [ ! -z "${uname}" ]; then
					echo "Deleting ${deluser}"
					userdel ${deluser}
				fi
			done
	fi
}
# Function to create new user accounts if they don't exist.
#
function createuser
{
	local USER=$1

	useradd -u $2 -g ${GROUP} $USER
	echo "${USER} ALL = NOPASSWD: ALL" >> /etc/sudoers.d/${GROUP}
	mkdir -p /home/$USER/.ssh
	echo $3 >> /home/$USER/.ssh/authorized_keys
	chown -R $USER:$GROUP  /home/$USER
	chmod -R 755 /home/$USER/.ssh
}

function createusers
{
	# Prevent OpsWorks being able to mess with our users
	# OpsWorks UID management range is > 2000
	#
	lastid=$(cat /etc/passwd | grep $jumpbox_gid | cut -d ':' -f 3 | sort | tail -n 1)
	if [ -z "${lastid}" ]; then
		lastid=1499
	fi
	uid=$(($lastid + 1))
	copykeys

	for user in "${keys[@]}"
		do
			user=$(echo $user | tr -d "\r\n")
			USERKEY=$(cat /tmp/keys/${user}.pub)

			# Create user of they don't exist
			#
			if [ ! -d "/home/${user}" ]; then
				echo -e "Creating account for ${user} with UID ${uid}"
				createuser ${user} ${uid} "${USERKEY}"
				(( uid++ ))
			else
				# Update user key if they do exist.
				# This makes key rotation on existing instances fast and easy
				#
				ukey=$(grep "${USERKEY}" "/home/${user}/.ssh/authorized_keys")
				if [ "${ukey}" != "${USERKEY}" ]; then
					echo ${USERKEY} > "/home/${user}/.ssh/authorized_keys"
				fi
			fi

		done

	# Admin users get sudo access on instances by default
	chmod 440 /etc/sudoers.d/${GROUP}

	# Clear tmp public key token store so old keys don't accumulate
	#
	rm -rf /tmp/keys
}

create_jumpbox_group
delusers
createusers

echo "Admin User accounts updated."